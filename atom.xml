<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>言于舟</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-01-17T16:31:12.155Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>xieyh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python生成排序算法动画</title>
    <link href="http://example.com/2024/01/18/python%E7%94%9F%E6%88%90%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8A%A8%E7%94%BB/"/>
    <id>http://example.com/2024/01/18/python%E7%94%9F%E6%88%90%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8A%A8%E7%94%BB/</id>
    <published>2024-01-17T16:28:30.000Z</published>
    <updated>2024-01-17T16:31:12.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>用python写了一个冒泡排序的动画</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">import pygame</span><br><span class="line">import sys</span><br><span class="line">import random</span><br><span class="line">import time</span><br><span class="line">#初始化pygame</span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line">#设置显示的窗口尺寸</span><br><span class="line">screen_width = 640</span><br><span class="line">screen_height = 480</span><br><span class="line">screen = pygame.display.set_mode((screen_width, screen_height))</span><br><span class="line">screen.fill((255,255,255))</span><br><span class="line"></span><br><span class="line">array_size = 10 #数组大小</span><br><span class="line">max_value = 10 #最大值</span><br><span class="line">sort_array = random.sample(range(1, max_value + 1), array_size)</span><br><span class="line">multiplier = screen_height / array_size</span><br><span class="line"></span><br><span class="line"># 冒泡排序的动画部分</span><br><span class="line">bubble_sorting = True  # 标记是否正在排序</span><br><span class="line">j,k = 0,0  # 当前迭代位置</span><br><span class="line">print(sort_array)</span><br><span class="line"></span><br><span class="line">button_show = True</span><br><span class="line"></span><br><span class="line">def draw_button():</span><br><span class="line">#定义按钮</span><br><span class="line">    button_weight = 100</span><br><span class="line">    button_height = 50</span><br><span class="line">    button_x = (screen_width-button_weight) / 2</span><br><span class="line">    button_y = (screen_height-button_height) / 2</span><br><span class="line">    button = pygame.Rect(button_x,button_y,button_weight,button_height)</span><br><span class="line">    pygame.draw.rect(screen,color=[100,100,100],rect=button)</span><br><span class="line">    #定义字体</span><br><span class="line">    font = pygame.font.SysFont(None,size=36)</span><br><span class="line">    text = font.render(&#x27;Start&#x27;,True,[255,0,0])</span><br><span class="line">    text_rect = text.get_rect() #获取文字尺寸</span><br><span class="line">    text_rect.center = (screen_width / 2,screen_height / 2)</span><br><span class="line">    screen.blit(text,text_rect)</span><br><span class="line">    return button</span><br><span class="line"></span><br><span class="line">def draw_array(sort_array):</span><br><span class="line">    high = [x * multiplier for x in sort_array] #矩形高度</span><br><span class="line">    width =  screen_width / array_size #矩形宽度</span><br><span class="line">    for i,value in enumerate(sort_array):</span><br><span class="line">        #计算矩形的x坐标</span><br><span class="line">        x = i * width</span><br><span class="line">        #计算矩形的y坐标</span><br><span class="line">        y =  screen_height - high[i]</span><br><span class="line">        #绘制矩形</span><br><span class="line">        pygame.draw.rect(screen,(152, 251, 152), [x, y, width, high[i]])</span><br><span class="line"></span><br><span class="line">#循环显示窗口</span><br><span class="line">while True:</span><br><span class="line">    draw_array(sort_array)</span><br><span class="line">    if button_show :</span><br><span class="line">        button = draw_button()</span><br><span class="line">    for event in pygame.event.get():</span><br><span class="line">        if event.type == pygame.QUIT:</span><br><span class="line">            pygame.quit()</span><br><span class="line">            sys.exit()</span><br><span class="line">        # 当鼠标点击窗口时执行操作</span><br><span class="line">        if event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            # 获取鼠标点击位置</span><br><span class="line">            mouse_pos = event.pos</span><br><span class="line">            # 检查是否点击了按钮</span><br><span class="line">            if button.collidepoint(mouse_pos):</span><br><span class="line">                for k in range(array_size):</span><br><span class="line">                    for j in range(0,array_size - k - 1):</span><br><span class="line">                        if sort_array[j] &gt; sort_array[j + 1]:</span><br><span class="line">                            sort_array[j], sort_array[j + 1] = sort_array[j + 1], sort_array[j]</span><br><span class="line">                            print(sort_array)</span><br><span class="line">                            # 更新窗口显示</span><br><span class="line">                            screen.fill((255,255,255))  # 清空屏幕</span><br><span class="line">                            draw_array(sort_array)</span><br><span class="line">                            pygame.display.update()</span><br><span class="line">                            time.sleep(1)</span><br><span class="line">                button_show = False</span><br><span class="line">    pygame.display.update()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;p&gt;用python写了一个冒泡排序的动画&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;ta</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode刷题记录(python)</title>
    <link href="http://example.com/2024/01/07/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2024/01/07/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2024-01-07T06:10:24.000Z</published>
    <updated>2024-01-17T13:01:45.576Z</updated>
    
    <content type="html"><![CDATA[<p>本博客记录自己开始刷leetcode的记录，包含刷过的题目，遇到的挫折，以及找到的解决办法，希望能给其他人一些参考。<br>[TOC]</p><span id="more"></span><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="1-两数之和（E）"><a href="#1-两数之和（E）" class="headerlink" title="1.两数之和（E）"></a>1.两数之和（E）</h2><h3 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h3><p>第一道题目,也是leetcode之旅的第一题，上来直接两个for循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">                num = nums[i] + nums[j]</span><br><span class="line">                <span class="keyword">if</span> num == target:</span><br><span class="line">                    <span class="keyword">return</span> [i, j]</span><br></pre></td></tr></table></figure><p>暴力解法，第一个循环遍历一遍数组的下标，第二个循环从下一个位置往后再遍历一次<br>时间复杂度为$O(N^2)$,空间复杂度为$O(1)$</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>不会做，看的官解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        hash_table = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> i,num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> target - num <span class="keyword">in</span> hash_table:</span><br><span class="line">                <span class="keyword">return</span> hash_table[target-num],i</span><br><span class="line">            hash_table[num] = i</span><br></pre></td></tr></table></figure><p><code>hash_table</code>创造一个空字典，储存数组中每个元素和他的索引<br><code>enumerate(nums)</code>同时返回元素的索引和值<br>使用哈希表的好处在于，遍历一次，查找的时候时间复杂度为$O(N)$,但空间复杂度稍微高了一点，也为$O(N)$</p><h2 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a>26. 删除有序数组中的重复项</h2><p>第一次做的时候没做出来,只过了一个test。。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i+<span class="number">1</span>] == nums[i]:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                nums.pop(i+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>然后看了官解，要用双指针,一边遍历一边查找相同元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        slow,fast = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> fast &lt; <span class="built_in">len</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[fast] != nums[slow]:</span><br><span class="line">                slow +=<span class="number">1</span></span><br><span class="line">                nums[slow] = nums[fast]</span><br><span class="line">            fast += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> slow + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h2><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><p>第一次做出来的这个解实际上并不高效,44ms,和16.93MB的内存分布,思路是这样的：</p><ol><li>新建一个数组<code>val_index</code>，储存通过遍历检测到<code>nums</code>中和<code>val</code>值一样的索引值</li><li>再使用一个循环，对储存索引值的数组进行遍历，从而得到需要删除的索引值</li><li>在循环中，加入一个循环从后往前遍历<code>nums</code>，删除对应位置的元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        val_index = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == val):</span><br><span class="line">                val_index.append(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(val_index):</span><br><span class="line">            <span class="keyword">for</span> delete <span class="keyword">in</span>  <span class="built_in">range</span>(i, length - <span class="number">1</span>):</span><br><span class="line">                nums[delete] = nums[delete + <span class="number">1</span>]</span><br><span class="line">            length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> length</span><br></pre></td></tr></table></figure></li></ol><p>优化了一点，36ms,17MB,减少了对索引值的储存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        val_index = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == val):</span><br><span class="line">                <span class="keyword">for</span> delete <span class="keyword">in</span> <span class="built_in">range</span>(i,length-<span class="number">1</span>):</span><br><span class="line">                    nums[delete] = nums[delete + <span class="number">1</span>]</span><br><span class="line">                length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> length</span><br></pre></td></tr></table></figure><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>网上参考别人的双指针方法，36ms，16.9MB在尝试的过程当中发现一件事情，用for循环比用while循环的时间占用更多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">        b = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> a &lt; <span class="built_in">len</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[a] != val:</span><br><span class="line">                nums[b] = nums[a]</span><br><span class="line">                b += <span class="number">1</span></span><br><span class="line">            a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h2 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35.搜索插入位置"></a>35.搜索插入位置</h2><p>刚做这道题时，还不太会二分查找，看到时间复杂度需要使用$O(\log(n))$时，以为又是双指针,后来尝试了下发现没必要，直接暴力解出来,但其实这样的时间复杂度是$O(n)$,不符合题目要求</p><h3 id="暴力-1"><a href="#暴力-1" class="headerlink" title="暴力"></a>暴力</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt;= target:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>之后学习了二分查找以后，写出来了第一个二分查找的代码，比较简单，结果也证明了没有考虑很多的东西，60ms,17.5MB</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        i,j = <span class="number">0</span>,<span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;=j:</span><br><span class="line">            m = (i+j) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> target &lt; nums[m]:</span><br><span class="line">                j = m - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> target &gt; nums[m]:</span><br><span class="line">                i = m + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> m</span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><p>为了优化代码，查了题解，发现自己二分查找只是学习了大概，还有很多细节没有学到：</p><ol><li>二分查找学习的第一步需要确定区间的<strong>左右开闭</strong>情况</li><li>固定数组长度：例如<strong>左闭右开</strong>就是<code>[0,len(nums)]</code></li><li>循环退出条件：<code>while left &lt; right:</code>,由于区间是右开，因此不能有<code>=</code></li><li>中间值的写法：<code>m = left + (right - left) // 2</code>,防止数太大溢出</li><li>中间值和目标值的比较：常规比较方法，后期忘记了可以再复习下</li></ol><p>之后，参考<a href="https://leetcode.cn/problems/search-insert-position/solutions/913116/shu-zu-zong-jie-liao-er-fen-cha-zhao-de-w61pe/">孤柒「一起学计算机」</a>的题解代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) <span class="comment">#采用左闭右开区间[left,right)</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right: <span class="comment"># 右开所以不能有=,区间不存在</span></span><br><span class="line">            mid = left + (right - left)//<span class="number">2</span> <span class="comment"># 防止溢出, //表示整除</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; target: <span class="comment"># 中点小于目标值,在右侧,可以得到相等位置</span></span><br><span class="line">                left = mid + <span class="number">1</span> <span class="comment"># 左闭,所以要+1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid <span class="comment"># 右开,真正右端点为mid-1</span></span><br><span class="line">        <span class="keyword">return</span> left <span class="comment"># 此算法结束时保证left = right,返回谁都一样</span></span><br></pre></td></tr></table></figure><h2 id="66-加一"><a href="#66-加一" class="headerlink" title="66.加一"></a>66.加一</h2><p>之前解过一次，思路简单，不要以<code>10</code>作为判断条件，而是<code>9</code>，是<code>9</code>直接变<code>0</code>，不是<code>9</code>加<code>1</code>然后直接返回，注意，如果<code>digits = [9]</code>,那么前面加个<code>1</code>就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">plusOne</span>(<span class="params">self, digits: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(digits) - <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> digits[i] == <span class="number">9</span>:</span><br><span class="line">                digits[i] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> digits[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> [<span class="number">1</span>] + digits</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                digits[i] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> digits</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21.合并两个有序链表"></a>21.合并两个有序链表</h2><p>做的第一道链表题，不会做，看的官解，需要用递归的方法</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, list1: <span class="type">Optional</span>[ListNode], list2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">if</span> list1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> list2</span><br><span class="line">        <span class="keyword">elif</span> list2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> list1</span><br><span class="line">        <span class="keyword">elif</span> list1.val &lt; list2.val:</span><br><span class="line">            list1.<span class="built_in">next</span> = self.mergeTwoLists(list1.<span class="built_in">next</span>,list2)</span><br><span class="line">            <span class="keyword">return</span> list1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list2.<span class="built_in">next</span> = self.mergeTwoLists(list1,list2.<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">return</span> list2</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本博客记录自己开始刷leetcode的记录，包含刷过的题目，遇到的挫折，以及找到的解决办法，希望能给其他人一些参考。&lt;br&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Conda的常用命令</title>
    <link href="http://example.com/2024/01/02/Conda%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2024/01/02/Conda%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2024-01-02T08:54:25.000Z</published>
    <updated>2024-01-08T09:26:23.078Z</updated>
    
    <content type="html"><![CDATA[<p>本博客记录一些常用的conda的命令</p><span id="more"></span><p>1、创建一个虚拟环境: <code>conda create -n 环境名 python=版本</code></p><p>2、查看自己创建的虚拟环境: <code>conda info --envs</code></p><p>3、激活某一虚拟环境: <code>activate 虚拟环境名</code></p><p>4、退出某一虚拟环境: <code>conda deactivate</code></p><p>5、conda安装包: <code>conda install 包名</code></p><p>6、conda环境中也可以使用pip</p><p>7、删除指定包: <code>conda uninstall/remove 包名</code></p><p>8、删除整个环境以及所属的所有包: <code>conda remove -n 环境名 --all</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本博客记录一些常用的conda的命令&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://example.com/2023/12/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2023/12/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-12-25T07:54:03.000Z</published>
    <updated>2024-01-08T09:26:27.605Z</updated>
    
    <content type="html"><![CDATA[<p>第一篇博客的工作记录</p><span id="more"></span><p>历经千辛万苦终于做好了自己的个人博客网站</p><p>感谢知乎<a href="https://zhuanlan.zhihu.com/p/102592286">枫叶</a>的搭建教学</p><p>希望未来自己可以在程序猿的路上越走越远</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;第一篇博客的工作记录&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
